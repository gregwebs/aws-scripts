#!/usr/bin/env bash
#
# Take the first service running in a cluster and make a one-off task based on that.
# If you have multiple services, this is probably not what you want
#
#   ./shared/aws/ecs-one-off <cluster-name> -- echo hello ECS
#
# Please note that you need to create the excess cluster capacity needed to run your task.

set -u
set -o errexit
set -o pipefail

function command_help() {
  echo "\
    [ONE_OFF_MEMORY=100] [ONE_OFF_CPU=100] [ONE_OFF_TD_ARN=] $(basename "$0") CLUSTER -e ENV_VAR=VALUE --no-command [--] command
  "
}

function error_msg() {
  {
  echo ""
  echo "ERROR: $*"
  echo ""
  } >&2
}

function exit_msg() {
  error_msg "$@"
  command_help >&2
  exit 1
}

# Buffer the output (before piping).
# This makes sure the error message from the 1st command
# gets printed before the 2nd command can fail.
# Also useful when stdout has error information but is normally suppressed.
function buffer() {
  if response=$("$@"); then
    echo "$response"
  else
    exit_msg "$*": "$response"
  fi
}

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a repo as a first argument"
fi
cluster="$1"
shift

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a command as additional arguments"
fi

ENVIRONMENT=""
NO_COMMAND=""
ENTRY_POINT=""

while test $# -gt 0; do
  case "$1" in
          -h|--help)
             command_help
             exit 0
             ;;
          --)
             shift
             break
             ;;
          -e|--environment)
             shift
             if [[ -z ${1+undefined-guard} ]]; then
               exit_msg "expected a environment argument"
             fi
             ENVIRONMENT="$ENVIRONMENT $1"
             shift
             ;;
          --no-command)
             NO_COMMAND=true
             shift
             ;;
          --entrypoint)
             shift
             if [[ -z ${1+undefined-guard} ]]; then
               exit_msg "expected a entry point argument"
             fi
             ENTRY_POINT="$(echo -n "$1" | jq -R -s -c '[.]')"
             shift
             ;;
          -*|--*)
             exit_msg "invalid argument: $1"
             ;;
          *)
             exit_msg "expected a separator -- and then a command: $1"
             ;;
  esac
done


if [[ -z "$NO_COMMAND" ]]; then
    if [[ -z ${1+undefined-guard} ]]; then
      exit_msg "expected a command as additional arguments"
    fi

    command=$(echo "$@" | tr ' ' '\n' \
        | awk '{print "\""$1"\""}' \
        | xargs -0 echo \ | egrep -v '^$' \
        | jq -s "."
    )
else
    if [[ ! -z ${1+undefined-guard} ]]; then
      exit_msg "did not expect a command with --no-command"
    fi
fi

AWS_DIR=$(dirname "$0")
service=$("$AWS_DIR/list-service" "$cluster")

AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"
export AWS_ARGS="${AWS_ARGS:-"--output json --region $AWS_DEFAULT_REGION"}"
function AWS_COMMAND() { aws "$@" $AWS_ARGS ; }

service_td_arn=$(buffer AWS_COMMAND ecs describe-services \
      --services "$service" --cluster "$cluster" \
    | jq -r .services[0].taskDefinition)
td_arn="${ONE_OFF_TD_ARN:-"$service_td_arn"}"
service_td=$(AWS_COMMAND ecs describe-task-definition --task-definition "$td_arn")

# implicitly assume there is just one container definition
cont_def=$(echo -n "$service_td" \
    | jq '.taskDefinition | .containerDefinitions[] | del(.portMappings)')
old_env=$(echo -n "$cont_def" \
    | jq '.environment' | jq .[])

new_output=$(
for env_var in ${ENVIRONMENT} ; do
  echo "$env_var" \
    | tr '=' ' ' \
    | awk '{print "{\"name\":", "\""$1"\"", ",\"value\":", "\""$2"\"", "}"}' \
    | jq .
done
)
new_env=$(echo "$old_env
$new_output" | jq -s .)

memory=${ONE_OFF_MEMORY:-100}
cpu=${ONE_OFF_CPU:-100}
previous_image=$(echo -n "$cont_def" | jq -r '.image')
image=$(echo -n "${ONE_OFF_IMAGE:-"$previous_image"}" | jq -s -R .)
changedDefinition=$(echo "$cont_def" \
    | jq ".+{image: $image, memoryReservation: $memory, cpu: $cpu}")
if [[ -z "$NO_COMMAND" ]]; then
    changedDefinition=$(echo "$changedDefinition" \
        | jq ".+{command: $command}")
fi
if [[ ! -z "$ENTRY_POINT" ]]; then
    changedDefinition=$(echo "$changedDefinition" \
        | jq ".+{entryPoint: $ENTRY_POINT}")
fi
if [[ ! -z "$ENVIRONMENT" ]]; then
    changedDefinition=$(echo "$changedDefinition" \
        | jq ".+{environment: $new_env}")
fi

volumes=$(echo -n "$service_td" \
    | jq '.taskDefinition | .volumes')

new_td_arn=$(buffer \
      AWS_COMMAND ecs register-task-definition --family "one-off" \
          --volumes "$volumes" \
          --container-definitions "[$changedDefinition]" \
    | jq -r '.taskDefinition | .taskDefinitionArn'
    )

response=$(buffer AWS_COMMAND ecs run-task --cluster "$cluster" \
	--task-definition "$new_td_arn")
if [[ true == $(echo "$response" | jq '.failures | length > 0') ]]; then
  exit_msg "$new_td_arn $response"
fi
echo -n "$response" \
    | jq '.tasks | .[] | {taskArn, containerInstanceArn, clusterArn, taskDefinitionArn}'
