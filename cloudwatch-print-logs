#!/usr/bin/env bash

set -u
set -o errexit
set -o pipefail

LOG_GROUP=
LOG_STREAM_PREFIX=

function command_help() {
  echo "\
    PAGE_SIZE=10000 $(basename "$0") LOG_GROUP LOG_STREAM_PREFIX
  "
}

function error_msg() {
  {
  echo ""
  echo "ERROR: $*"
  echo ""
  } >&2
}

function exit_msg() {
  error_msg "$@"
  command_help >&2
  exit 1
}

# Buffer the output (before piping).
# This makes sure the error message from the 1st command
# gets printed before the 2nd command can fail.
# Also useful when stdout has error information but is normally suppressed.
function buffer() {
  if response=$("$@"); then
    echo "$response"
  else
    exit_msg "$*": "$response"
  fi
}

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a LOG GROUP as a first argument"
fi
LOG_GROUP="$1"
shift

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a LOG STREAM PREFIX as a second argument"
fi
LOG_STREAM_PREFIX="$1"

AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"
export AWS_ARGS="${AWS_ARGS:-"--output json --region $AWS_DEFAULT_REGION"}"
function AWS_COMMAND() { aws "$@" $AWS_ARGS ; }

log_stream_name="${LOG_STREAM_NAME:-}"
{
     while [[ -z "$log_stream_name" ]]; do
        streams=$(AWS_COMMAND logs describe-log-streams --log-group-name "$LOG_GROUP" \
            --log-stream-name-prefix "$LOG_STREAM_PREFIX")
        log_stream_name=$(echo "$streams" | \
                jq -r '[.logStreams[] | {logStreamName, lastEventTimestamp}] | sort_by(.lastEventTimestamp) | .[] | .logStreamName' | \
                tail -1)

        if [[ -z "$log_stream_name" ]]; then
            echo "looking for $LOG_GROUP $LOG_STREAM_PREFIX"
            sleep 5
        fi
    done

    echo "found $log_stream_name"
} >&2

function get_log(){
  AWS_COMMAND logs get-log-events --log-group-name "$LOG_GROUP" --log-stream-name "$log_stream_name" \
    | jq -r '.events[] | .message' | jq -r '.message' | sed 's/^\s*//' | sed 's/\s*$//'
}

get_log || (echo "waiting for log to show up" >&2 && sleep 10 && get_log)
