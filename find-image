#!/usr/bin/env bash

set -u
set -o errexit
set -o pipefail

function command_help() {
  echo "\
    $0 REPO IMAGE_TAG
  " >&2
}

function error_msg() {
  {
  echo ""
  echo "ERROR: $*"
  echo ""
  } >&2
}

function exit_msg() {
  error_msg "$@"
  command_help
  echo "" >&2
  exit 1
}

# Buffer the output (before piping).
# This makes sure the error message from the 1st command
# gets printed before the 2nd command can fail.
# Also useful when stdout has error information but is normally suppressed.
function buffer() {
  if response=$("$@"); then
    echo "$response"
  else
    exit_msg "$*": "$response"
  fi
}

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a repo as a first argument"
fi

if [[ -z ${2+undefined-guard} ]]; then
  exit_msg "expected an image tag as a second argument"
fi

repo="$1"
image_tag="$2"

buffer aws ecr list-images --no-paginate \
    --repository-name "$repo" \
    --filter tagStatus=TAGGED \
  | jq -r ".imageIds[] | select(.imageTag==\"$image_tag\")"
